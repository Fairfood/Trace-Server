"""Django settings for fairtrace_v2 project.

Generated by 'django-admin startproject' using Django 2.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/
import os
from configparser import RawConfigParser
from gettext import gettext as _

from celery.schedules import crontab

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(
    os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
)

config = RawConfigParser()
config.read("/etc/secret/fairtrace_v2/secret.ini")

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config.get("app", "SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ROOT_URL = config.get("app", "ROOT_URL")
NAVIGATE_URL = config.get("app", "NAVIGATE_URL")
DEPLOYMENT = config.get("app", "DEPLOYMENT", fallback="development")

ALLOWED_HOSTS = ["localhost"]

INTERNAL_IPS = ["127.0.0.1", "35.159.24.37"]

# Application definition

INSTALLED_APPS = [
    "modeltranslation",
    "cachalot",
    # Base
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_neomodel",
    # Requirements
    "rest_framework",
    "corsheaders",
    "django_filters",
    "fcm_django",
    "nested_admin",
    "rest_framework_swagger",
    "drf_yasg",
    "django_celery_beat",
    "django_otp",
    "django_otp.plugins.otp_totp",
    # Utilities
    "django_extensions",
    "debug_toolbar",
    "django_json_widget",
    "fairtrace_v2.management_commands",
    # API (V2)
    "v2.accounts",
    "v2.communications",
    "v2.supply_chains",
    "v2.products",
    "v2.transactions",
    "v2.claims",
    "v2.dashboard",
    "v2.activity",
    "v2.transparency_request",
    "v2.blockchain",
    "v2.projects",
    "v2.bulk_templates",
    "v2.bulk_uploads",
    "v2.reports",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django_otp.middleware.OTPMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    # Utilities
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    # CORS header middlewares
    "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = "fairtrace_v2.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "fairtrace_v2.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation"
            ".UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": (
            "django.contrib.auth.password_validation.MinimumLengthValidator"
        ),
    },
    {
        "NAME": (
            "django.contrib.auth.password_validation.CommonPasswordValidator"
        ),
    },
    {
        "NAME": (
            "django.contrib.auth.password_validation.NumericPasswordValidator"
        ),
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = "static/"

# Used in common.library to find location from IP.
GEO_IP_URL = "http://freegeoip.net/json/"

ACCESS_TOKEN_LENGTH = 90
OTP_LENGTH = 6

# Hashdid encoding.

HASHHID_SALT = config.get("libs", "HASHHID_SALT")
HASHHID_MIN_LENGTH = 5

# TOTP Token
TOTP_TOKEN = config.get("libs", "TOTP_TOKEN")

AUTH_USER_MODEL = "accounts.FairfoodUser"

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": config.get("database", "DB_NAME"),
        "USER": config.get("database", "DB_USER"),
        "PASSWORD": config.get("database", "DB_PASSWORD"),
        "PORT": config.get("database", "DB_PORT", fallback="5432"),
        "HOST": config.get("database", "DB_HOST", fallback="localhost"),
    }
}

REDIS_URL = config.get("database", "REDIS_URL", fallback="redis://127.0.0.1")
REDIS_PORT = config.get("database", "REDIS_PORT", fallback=6379)

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"{REDIS_URL}:{REDIS_PORT}/1",
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
        "KEY_PREFIX": "fairtrace_v2_django",
    },
    "filesystem": {
        "BACKEND": "common.cache.FileBasedCacheOperational",
        "LOCATION": "/var/tmp/django_cache",
        "TIMEOUT": None,
    },
}

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "common.drf_custom.authentication.JWtAuthentication",
    ),
    "EXCEPTION_HANDLER": (
        "common.drf_custom.exception_handler.custom_exception_handler"
    ),
    "DATETIME_FORMAT": "%s",
    "DEFAULT_PAGINATION_CLASS": (
        "rest_framework.pagination.LimitOffsetPagination"
    ),
    "PAGE_SIZE": 10,
    "DEFAULT_RENDERER_CLASSES": ("common.drf_custom.render.ApiRenderer",),
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
    ),
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
    "COERCE_DECIMAL_TO_STRING": False,
}

# Static files and templates
STATIC_URL = "/static/"
TEMPLATES_DIR = os.path.join(BASE_DIR, "templates")
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [TEMPLATES_DIR],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_METHODS = ("GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS")
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-disposition",
    "content-type",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    # Custom added
    "user-id",
    "bearer",
    "node-id",
    "otp",
    "version",
    "timezone",
    "language",
    "x-impersonate",
]
CORS_PREFLIGHT_MAX_AGE = 86400
CORS_ALLOW_CREDENTIALS = True

FROM_EMAIL = "Trace <trace@fairfood.org>"
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = config.get("email", "EMAIL_HOST")
EMAIL_PORT = config.get("email", "EMAIL_PORT")
EMAIL_HOST_USER = config.get("email", "EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = config.get("email", "EMAIL_HOST_PASSWORD")
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False

BC_MIDDLEWARE_BASE_URL = (
    "https://v1.api.bcmiddleware.cied.in/v1/registry/requests/"
)
BLOCKCHAIN_PRIVATE_KEY_PATH = "/etc/secret/fairtrace_v2/blockchain"
BLOCKCHAIN_CLIENT_ID = config.get("blockchain", "BLOCKCHAIN_CLIENT_ID")
BLOCKCHAIN_ENCRYPTION_KEY = config.get(
    "blockchain", "BLOCKCHAIN_ENCRYPTION_KEY"
)

TREASURY_ACCOUNT_ID = config.get("blockchain", "TREASURY_ACCOUNT_ID")
TREASURY_ENCRYPED_PRIVATE = config.get(
    "blockchain", "TREASURY_ENCRYPED_PRIVATE"
)

CELERY_BROKER_URL = f"{REDIS_URL}:{REDIS_PORT}"
CELERY_TIMEZONE = "UTC"

CELERY_BEAT_SCHEDULE = {
    "send-reminder-emails-everyday": {
        "task": "send_out_reminder_emails",
        "schedule": crontab(hour=7, minute=0),
    },
    "sync-from connect-everyday": {
        "task": "daily_sync_from_connect",
        "schedule": crontab(hour=22, minute=0),
    },
    "delete_old_synchronizations": {
        "task": "delete_old_synchronizations",
        "schedule": crontab(hour=21, minute=0, day_of_week=0),
    },
}
CELERY_DEFAULT_QUEUE = "low"
CELERY_ROUTES = {
    "send_email": {"queue": "high"},
    "v2.dashboard.cache_handlers": {"queue": "ci_queue"},
}

NEO4J_USERNAME = config.get("database", "NEO4J_USERNAME")
NEO4J_PASSWORD = config.get("database", "NEO4J_PASSWORD")
NEOMODEL_NEO4J_BOLT_URL = (
    f"bolt://{NEO4J_USERNAME}:{NEO4J_PASSWORD}@localhost:7687"
)
NEOMODEL_ENCRYPTED_CONNECTION = False

HEDERA_ACCOUNT_EXPLORER = "https://explorer.kabuto.sh/testnet/id/{account_id}"
HEDERA_TRANSACTION_EXPLORER = (
    "https://explorer.kabuto.sh/testnet/transaction/{address}"
)

TOPL_TRANSACTION_EXPLORED = (
    "https://annulus.topl.services/#/transaction/{address}"
)

HEDERA_NETWORK = 1  # For testnet

# SMS provider
PLIVO_ID = config.get("libs", "PLIVO_ID")
PLIVO_TOKEN = config.get("libs", "PLIVO_TOKEN")

CI_LANGUAGES = [
    ("en", _("English")),
    ("es", _("Spanish")),
    ("fr", _("French")),
    ("nl", _("Dutch")),
]

DASHBOARD_LANGUAGES = []

LANGUAGES = CI_LANGUAGES + DASHBOARD_LANGUAGES

MODELTRANSLATION_FALLBACK_LANGUAGES = list(dict(LANGUAGES).keys())

LOCALE_PATHS = [os.path.join(BASE_DIR, "locale")]

CONSUMER_INTERFACE_V2_URL = config.get("app", "CI_URL", fallback=None)

CACHALOT_ONLY_CACHABLE_APPS = ("supply_chains", "transactions")

GOOGLE_OAUTH2_CLIENT_ID = config.get("libs", "GOOGLE_OAUTH2_CLIENT_ID")
GOOGLE_OAUTH2_CLIENT_SECRET = config.get("libs", "GOOGLE_OAUTH2_CLIENT_SECRET")

TRACE_OAUTH2_CLIENT_ID = config.get(
    "libs", "TRACE_OAUTH2_CLIENT_ID")

TRACE_OAUTH2_CLIENT_SECRET = config.get(
    "libs", "TRACE_OAUTH2_CLIENT_SECRET")
TRACE_OAUTH2_BASE_URL = ROOT_URL + '/o/oauth2/'

ADMIN_FRONT_ROOT_URL = config.get("app", "ADMIN_FRONT_ROOT_URL")
LOGIN_ROOT_URL = config.get("app", "LOGIN_ROOT_URL")


LOGIN_TOTP_SECRET = config.get("otp", "LOGIN_TOTP_SECRET")
DP_PASS_TOTP_SECRET = config.get("otp", "DP_PASS_TOTP_SECRET")
CI_TOTP_SECRET = config.get("otp", "CI_TOTP_SECRET")


# connect credentials
CONNECT_USER_NAME = config.get("connect", "USER_NAME")
CONNECT_PASSWORD = config.get("connect", "PASSWORD")
CONNECT_DEVICE_ID = config.get("connect", "DEVICE_ID")

#sync settings
SYNC_USER_ID = config.get("sync", "SYNC_USER_ID")
SYNC_NODE_ID = config.get("sync", "SYNC_NODE_ID")
SYNC_USER_DEFAULT_PASSWORD = config.get("sync", "SYNC_USER_DEFAULT_PASSWORD")
CONNECT_OAUTH2_BASE_URL = ROOT_URL + "/connect/v1/"
CONNECT_OAUTH2_CLIENT_ID = config.get(
    "libs", "CONNECT_OAUTH2_CLIENT_ID")
CONNECT_OAUTH2_CLIENT_SECRET = config.get(
    "libs", "CONNECT_OAUTH2_CLIENT_SECRET")
CONNECT_SYNC_COMPANY_ID =  config.get("sync", "CONNECT_SYNC_COMPANY_ID")
CONNECT_SYNC_DEFAULT_CURRENCY_CODE = config.get("sync","CONNECT_SYNC_DEFAULT_CURRENCY_CODE", fallback="IDR")

NAVIGATE_OAUTH2_CLIENT_ID = config.get("sync", "NAVIGATE_OAUTH2_CLIENT_ID", fallback="")
NAVIGATE_OAUTH2_CLIENT_SECRET = config.get("sync", "NAVIGATE_OAUTH2_CLIENT_SECRET", fallback="")

NAVIGATE_DEFAULT_STATE = config.get("sync", "NAVIGATE_DEFAULT_STATE", fallback="Bali")
NAVIGATE_DEFAULT_COUNTRY = config.get("sync", "NAVIGATE_DEFAULT_COUNTRY", fallback="Indonesia")